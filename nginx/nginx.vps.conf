user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimize for VPS (smaller worker connections)
events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    types_hash_max_size 2048;
    server_tokens off;
    client_max_body_size 20M;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time';

    access_log /var/log/nginx/access.log main;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 4;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml
        application/rss+xml
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:5m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:5m rate=3r/m;
    limit_req_zone $binary_remote_addr zone=uploads:5m rate=5r/s;

    # Proxy cache
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=100m inactive=30m use_temp_path=off;

    # Upstream backend
    upstream backend {
        server backend:4000 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }

    # Security headers map
    map $sent_http_content_type $security_headers {
        ~*text/html "add_header X-Frame-Options DENY always; add_header X-Content-Type-Options nosniff always; add_header X-XSS-Protection '1; mode=block' always; add_header Referrer-Policy 'strict-origin-when-cross-origin' always;";
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;

        # Allow Let's Encrypt challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl;
        http2 on;
        server_name _;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/private.key;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m;
        ssl_session_tickets off;

        # Modern SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Main API routes
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;

            # Proxy to backend
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;

            # Caching for GET requests
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
            proxy_cache_key "$scheme$request_method$host$request_uri";

            # Cache bypass for authenticated requests
            proxy_cache_bypass $http_authorization;
            proxy_no_cache $http_authorization;

            # Add cache headers
            add_header X-Cache-Status $upstream_cache_status always;
        }

        # Authentication routes (stricter rate limiting)
        location /api/auth/ {
            limit_req zone=auth burst=5 nodelay;

            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # No caching for auth
            proxy_no_cache 1;
            proxy_cache_bypass 1;

            # Shorter timeouts for auth
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Health check (no rate limiting)
        location /health {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            access_log off;
        }

        # File uploads with rate limiting
        location /uploads/ {
            limit_req zone=uploads burst=10 nodelay;

            alias /var/www/uploads/;
            expires 30d;
            add_header Cache-Control "public, no-transform";
            add_header X-Content-Type-Options nosniff;

            # Security: only allow safe file types
            location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|pdf|doc|docx)$ {
                expires 30d;
                add_header Cache-Control "public, no-transform";
                try_files $uri =404;
            }

            # Block dangerous file types
            location ~* \.(php|asp|aspx|jsp|cgi|sh|py|pl|exe|dll|js|html|htm)$ {
                deny all;
                return 404;
            }
        }

        # API documentation
        location /api/docs {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Cache docs for 1 hour
            proxy_cache api_cache;
            proxy_cache_valid 200 1h;
        }

        # Security: block access to sensitive files
        location ~ /\.(env|git|htaccess|htpasswd) {
            deny all;
            return 404;
        }

        location ~ /(docker-compose|Dockerfile|\.git) {
            deny all;
            return 404;
        }

        # Block common exploit attempts
        location ~ /(admin|phpmyadmin|wp-admin|wordpress) {
            deny all;
            return 404;
        }

        # Default root response
        location = / {
            return 200 '{"status":"ok","message":"TripGo API is running","docs":"/api/docs","health":"/health"}';
            add_header Content-Type application/json;
        }

        # Catch-all for undefined routes
        location / {
            return 404 '{"success":false,"message":"Route not found","suggestion":"Check /api/docs for available endpoints"}';
            add_header Content-Type application/json;
        }
    }

    # Server block for monitoring (internal access only)
    server {
        listen 127.0.0.1:8080;
        server_name localhost;

        location /nginx_status {
            stub_status on;
            access_log off;
        }

        location /health {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}